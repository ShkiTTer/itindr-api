openapi: 3.0.3
info:
  title: ITindr Api
  description: "Base URL: http://193.38.50.175/itindr/api/mobile"
  version: 1.0.0
  contact:
    email: shkipper65@gmail.com
    name: ShkiTTer
servers:
  - url: 'http://193.38.50.175/itindr/api/mobile'
    description: 'Mobile'

tags:
  - name: Auth
    description: 'Авторизация/регистрация'

paths:
  /v1/auth/login:
    description: Авторизация
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
            example:
              email: 'test@mail.ru'
              password: 'qwerty'

      responses:
        200:
          $ref: '#/components/responses/TokenInfo'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
      tags:
        - Auth

  /v1/auth/register:
    description: Регистрация
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
            example:
              email: 'test@mail.ru'
              password: 'qwerty'

      responses:
        200:
          $ref: '#/components/responses/TokenInfo'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
      tags:
        - Auth

  /v1/auth/logout:
    description: Выход из аккаунта
    post:
      security:
        - BearerAuth: [ ]
      responses:
        204:
          description: 'Logout succeeded'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
      tags:
        - Auth

  /v1/auth/refresh:
    description: Обновление Access-токена с помощью Refresh-токена
    post:
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenBody'
            example:
              refreshToken: 'a3dWTmJDQkVuQlNHNGRvWU9LZW4='
      responses:
        200:
          $ref: '#/components/responses/TokenInfo'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
      tags:
        - Auth

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minimum: 8
      required:
        - email
        - password

    RegisterBody:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minimum: 8
      required:
        - email
        - password

    RefreshTokenBody:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

  responses:
    BadRequest:
      description: 'Bad Request Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: 'Bad Request'

    NotFound:
      description: 'Not Found Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: 'Resource not found'

    Unauthorized:
      description: 'Unauthorized Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: 'You are not authorized'

    Forbidden:
      description: 'Forbidden Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: 'Not enough rights to perform the action'

    Conflict:
      description: 'Conflict Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: 'Resource already exist'

    TokenInfo:
      description: 'Token information'
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                type: string
              accessTokenExpiredAt:
                type: integer
                format: int64
              refreshToken:
                type: string
              refreshTokenExpiredAt:
                type: integer
                format: int64
          example:
            accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
            accessTokenExpiredAt: 1632325306
            refreshToken: 'a3dWTmJDQkVuQlNHNGRvWU9LZW4='
            refreshTokenExpiredAt: 1632325306